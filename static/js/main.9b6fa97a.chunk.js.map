{"version":3,"sources":["Answer.js","Card.js","Display.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Answer","showGuessResult","answer","count","isCorrect","_this$props","this","props","includes","react_default","a","createElement","className","onClick","nextQuestion","Component","Card","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$state","state","question","answeredCorrectly","setState","showNextQuestion","currentAnswer","showQuestion","questions","randomIndex","getRandomNumber","length","rightAnswer","findQuestion","definition","max","Math","floor","random","type","index","shift","checkAnswer","guess","toLowerCase","processGuess","e","correct","target","previousSibling","value","showPreviousResult","matchedAnswer","answeredQuestions","forEach","showBtnText","_this$state$question","_this$state2","placeholder","onFocus","onBlur","Answer_Answer","Display","correctlyAnswered","Card_Card","prototypes","Nav","theScore","reset","App","componentDidMount","fetch","then","data","json","setTimeout","aTypes","getFromStorage","isLoading","catch","err","console","error","localStorage","JSON","parse","getItem","updateAnsweredQuestions","modArr","push","setItem","stringify","tallyScore","filter","removeItem","Nav_Nav","Display_Display","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b6fa97a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CSS/Main.scss';\n\nexport default class Answer extends Component {\n  \n  showGuessResult = (answer, count) => {  \n    if (answer && count > 0) {\n      return \"THAT'S CORRECT!\";\n    } else if (answer === false && count > 0) {\n      return \"THAT'S INCORRECT!\";\n    }\n  }\n  \n  render() {\n    let { answer, count } = this.props;\n    let questionAnswered = answer || answer === false;\n\n    if (questionAnswered) {\n      let result = this.showGuessResult(answer, count).includes('INCORRECT');\n      let isCorrect;\n      result ? isCorrect = 'incorrect' : isCorrect = 'correct'; \n      \n      return (\n        <div className=\"answer\">\n          <button onClick={this.props.nextQuestion}\n                  className=\"next-question\">\n            Submit answer & show next Question\n          </button>\n          <p className={isCorrect}>\n            {this.showGuessResult(answer, count)}\n          </p>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n}\n\n\n","import React, { Component } from 'react';\nimport './CSS/Main.scss';\nimport Answer from './Answer.js'\n\nexport default class Card extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      count: 0,\n      question: null,\n      answeredCorrectly: null,\n      showNextQuestion: false\n    }\n  }\n\n  nextQuestion = () => {\n    let { question, answeredCorrectly } = this.state;\n    this.setState({\n      showNextQuestion: true,\n      count: 0,\n      answeredCorrectly: null\n    })\n    \n    if (question !== null) {\n      this.props.currentAnswer(question, answeredCorrectly)\n    }\n    this.showQuestion();\n  }\n\n  showQuestion = () => {\n    let { questions } = this.props\n    \n    let randomIndex = this.getRandomNumber(questions.length)\n    let rightAnswer = this.findQuestion('keys', randomIndex)\n    let definition = this.findQuestion('values', randomIndex)\n\n    this.setState({\n      question: { definition: definition, answer: rightAnswer }\n    });\n  }\n\n  getRandomNumber = (max) => {\n    return Math.floor(Math.random() * max)\n  }\n\n  findQuestion = (type, index) => {\n    return Object[type](this.props.questions[index]).shift()\n  }\n\n  checkAnswer = (guess) => {\n    let { answer } = this.state.question;\n    let guessIsCorrect = guess.toLowerCase() === answer.toLowerCase()\n\n    if (guessIsCorrect) return true;\n    else return false;\n  }\n\n  processGuess = (e) => {\n    let correct = this.checkAnswer(e.target.previousSibling.value);\n\n    this.setState({\n      count: this.state.count + 1,\n      answeredCorrectly: correct\n    })\n    e.target.previousSibling.value = '';\n  }\n\n  showPreviousResult = (question) => {\n    let matchedAnswer;\n    this.props.answeredQuestions.forEach(answer => {\n      if (answer.guess.definition === question) {\n        matchedAnswer = answer.question;\n      }\n    })\n\n    if (matchedAnswer) return 'correct!';\n    else return 'incorrect...';\n  }\n\n  showBtnText = () => {\n    if (this.state.count > 0) {\n      return 'Click to try again';\n    } else {\n      return 'Click to check answer';\n    }\n  }\n\n  render() {\n    if (!this.state.showNextQuestion) {\n      return (\n        <div>\n          <h4 onClick={this.nextQuestion}\n            className=\"begin\">Click to begin</h4>\n          <p className=\"intro\">Welcome to Study Time, a web-based flashcard app to practice how well you know your Javascript Array Prototypes! </p>\n        </div>\n      )\n    } else {\n      let { definition, answer } = this.state.question;\n      let { count, answeredCorrectly } = this.state;\n      let result = this.showPreviousResult(definition).includes('incorrect');\n      let isCorrect;\n      result ? isCorrect = 'no' : isCorrect = 'yes';\n\n      return (\n        <div className=\"card\">\n          <p className=\"num-guess\">\n            Number of guesses so far:\n            <span className=\"count\">  {count}</span>\n          </p>\n          <p className=\"definition\">\n            {definition} ......{answer}.....\n            </p>\n          <p className=\"previous\">Previous result for this question was: <span className={isCorrect}>{this.showPreviousResult(definition)}</span></p>\n          <input\n            type=\"text\"\n            className=\"user-input\"\n            placeholder=\"ENTER YOUR ANSWER HERE\"\n            onFocus={(e) => e.target.placeholder = \"\"}\n            onBlur={(e) => e.target.placeholder = \"ENTER YOUR ANSWER HERE\"} />\n          <button onClick={this.processGuess}\n                  className=\"user-btn\">\n            {this.showBtnText()}\n          </button>\n          <Answer nextQuestion={this.nextQuestion}\n                  answer={answeredCorrectly}\n                  count={count} />\n        </div>\n      )\n    }\n  }\n}","import React, { Component } from 'react';\nimport './CSS/Main.scss';\nimport Card from './Card.js'\n\nexport default class Display extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      correctlyAnswered: null\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"display\">\n        <Card questions={this.props.prototypes}\n          currentAnswer={this.props.currentAnswer}\n          answeredQuestions={this.props.answeredQuestions} />\n      </section>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './CSS/Main.scss';\n\nexport default class Nav extends Component {\n\n  render() {\n    let { theScore } = this.props;\n \n    return (\n      <nav className=\"nav\">\n        <ul className=\"types\">\n          <li className=\"aTypes\">Practice Array Prototypes</li>\n        </ul>\n        <ul className=\"user\">\n          <li>Total correct: {theScore}</li>\n          <li onClick={this.props.reset}\n            className=\"reset-btn\">Reset</li>\n        </ul>\n      </nav>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './CSS/Main.scss';\nimport Display from './Display.js';\nimport Nav from './Nav.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      prototypes: null, \n      answeredQuestions: [],\n      isLoading: true\n    }\n  }\n\n  componentDidMount = () => { \n    fetch('http://memoize-datasets.herokuapp.com/api/v1/aTypes')\n      .then(data => data.json())\n      .then(data => {\n        setTimeout(() => {\n          this.setState({\n            prototypes: data.aTypes,\n            answeredQuestions: this.getFromStorage(),\n            isLoading: false\n          })\n        }, 200);\n      })\n      .catch(err => console.error(err))\n  }\n\n  getFromStorage = () => {\n    if (localStorage.length === 0) {\n      return [];\n    } else {\n      return JSON.parse(localStorage.getItem('data'))\n    }\n  }\n\n  updateAnsweredQuestions = (guess, question) => {\n    let modArr = this.state.answeredQuestions\n    modArr.push({ guess: guess, question: question })\n    this.setState({ answeredQuestions: modArr })\n    localStorage.setItem('data', JSON.stringify(modArr))\n  }\n\n  tallyScore = () => { \n    let { answeredQuestions } = this.state;\n\n    if (answeredQuestions.length === 0) {\n      return 0;\n    } else {\n      return answeredQuestions.filter(answer => {\n        return answer.question\n      }).length\n    }\n  }\n\n  reset = () => {\n    this.setState({ answeredQuestions: [] })\n    localStorage.removeItem('data');\n  }\n\n  render() {\n    let { prototypes, isLoading } = this.state;\n    \n    if (isLoading) {\n      return (\n        <div>Loading</div>\n      );\n    } else {\n      let { answeredQuestions } = this.state;\n      return (\n        <main className=\"App\">\n          <h1 className=\"header\">Welcome to Study Time</h1>\n          <Nav theScore={this.tallyScore()}\n               reset={this.reset} />\n          <Display prototypes={prototypes}\n                   currentAnswer={this.updateAnsweredQuestions}\n                   answeredQuestions={answeredQuestions} />\n        </main>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './Main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}