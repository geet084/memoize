{"version":3,"sources":["Answer.js","Question.js","Card.js","Display.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Answer","showGuessResult","answer","count","isCorrect","_this$props","this","props","includes","react_default","a","createElement","className","onClick","nextQuestion","Component","Question","definition","previous","checkAnswer","showPrevResult","showBtnText","type","placeholder","onFocus","e","target","onBlur","Card","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$state","state","question","answeredCorrectly","setState","showNextQuestion","currentAnswer","showQuestion","questions","randomIndex","getRandomNumber","length","rightAnswer","findQuestion","max","Math","floor","random","index","shift","previousSibling","value","toLowerCase","matchedAnswer","answeredQuestions","forEach","guess","undefined","_this$state2","Question_Question","Answer_Answer","Display","correctlyAnswered","Card_Card","prototypes","Nav","theScore","reset","App","componentDidMount","fetch","then","data","json","setTimeout","aTypes","getFromStorage","isLoading","catch","err","console","error","localStorage","JSON","parse","getItem","updateAnsweredQuestions","modArr","push","setItem","stringify","tallyScore","filter","removeItem","Nav_Nav","Display_Display","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15b091da.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CSS/Main.scss';\n\nexport default class Answer extends Component {\n  \n  showGuessResult = (answer, count) => {  \n    if (answer && count > 0) {\n      return \"THAT'S CORRECT!\";\n    } else if (answer === false && count > 0) {\n      return \"THAT'S INCORRECT!\";\n    }\n  }\n  \n  render() {\n    let { answer, count } = this.props;\n    let questionAnswered = answer || answer === false;\n    \n    if (questionAnswered) {\n      let result = this.showGuessResult(answer, count).includes('INCORRECT');\n      let isCorrect;\n      result ? isCorrect = 'incorrect' : isCorrect = 'correct'; \n      \n      return (\n        <div className=\"answer\">\n          <button onClick={this.props.nextQuestion}\n                  className=\"next-question\">\n            Submit answer & show next Question\n          </button>\n          <p className={isCorrect}>\n            {this.showGuessResult(answer, count)}\n          </p>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n}\n\n\n","import React, { Component } from 'react';\nimport './CSS/Main.scss';\n\nexport default class Question extends Component {\n\n  render() {\n    let { count, definition, previous, isCorrect, checkAnswer, showPrevResult, showBtnText } = this.props;\n    return (\n      <div className=\"question\">\n        <p className=\"num-guess\">\n          Number of guesses so far:\n            <span className=\"count\">  {count}</span>\n        </p>\n        <p className=\"definition\">{definition}</p>\n        <p className={previous}>\n          Previous result for this question was:\n            <span className={isCorrect}>\n            {showPrevResult}\n          </span>\n        </p>\n        <input type=\"text\" className=\"user-input\"\n          placeholder=\"ENTER YOUR ANSWER HERE\"\n          onFocus={(e) => e.target.placeholder = \"\"}\n          onBlur={(e) => e.target.placeholder = \"ENTER YOUR ANSWER HERE\"} />\n        <button onClick={checkAnswer}\n          className=\"user-btn\">{showBtnText}\n        </button>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './CSS/Main.scss';\nimport Answer from './Answer.js'\nimport Question from './Question.js'\n\nexport default class Card extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      count: 0,\n      question: null,\n      answeredCorrectly: null,\n      showNextQuestion: false\n    }\n  }\n\n  nextQuestion = () => {\n    let { question, answeredCorrectly } = this.state;\n    this.setState({\n      showNextQuestion: true,\n      count: 0,\n      answeredCorrectly: null\n    })\n    \n    if (question !== null) {\n      this.props.currentAnswer(question, answeredCorrectly)\n    }\n    this.showQuestion();\n  }\n\n  showQuestion = () => {\n    let { questions } = this.props\n    \n    let randomIndex = this.getRandomNumber(questions.length)\n    let rightAnswer = this.findQuestion('keys', randomIndex)\n    let definition = this.findQuestion('values', randomIndex)\n\n    this.setState({\n      question: { definition: definition, answer: rightAnswer }\n    });\n  }\n\n  getRandomNumber = (max) => {\n    return Math.floor(Math.random() * max)\n  }\n\n  findQuestion = (type, index) => {\n    return Object[type](this.props.questions[index]).shift()\n  }\n\n  checkAnswer = (e) => {\n    \n    let target = e.target.previousSibling.value;\n    let { answer } = this.state.question;\n\n    let guessIsCorrect = target.toLowerCase() === answer.toLowerCase()\n    let isCorrect;\n\n    if (guessIsCorrect) isCorrect = true;\n    else isCorrect = false;\n\n    this.setState({\n      count: this.state.count + 1,\n      answeredCorrectly: isCorrect\n    })\n    e.target.previousSibling.value = '';\n  }\n\n  showPrevResult = (question) => {\n    let matchedAnswer;\n    this.props.answeredQuestions.forEach(answer => {\n      if (answer.guess.definition === question) {\n        matchedAnswer = answer.question;\n      }\n    })\n\n    if (matchedAnswer === undefined) return 'undefined';\n    else if (matchedAnswer) return 'correct!'\n    else return 'incorrect...';\n  }\n\n  showBtnText = () => {\n    if (this.state.count > 0) return 'Click to try again';\n    else return 'Click to check answer';\n  }\n\n  render() {\n    if (!this.state.showNextQuestion) {\n      return (\n        <div>\n          <h4 onClick={this.nextQuestion}\n              className=\"begin\">Click to begin</h4>\n          <p className=\"intro\">\n            Welcome to Study Time, a web-based \n            flashcard app to practice how well \n            you know your Javascript Array Prototypes!\n          </p>\n        </div>\n      )\n    } else {\n      let { definition} = this.state.question;\n      let { count, answeredCorrectly } = this.state;\n      let isCorrect, previous;\n      \n      let result = this.showPrevResult(definition).includes('incorrect');\n      result ? isCorrect = 'no' : isCorrect = 'yes';\n      let showPrevious = this.showPrevResult(definition).includes('undefined');\n      showPrevious ? previous = 'undefined' : previous = 'show-previous';\n\n      return (\n        <div className=\"card\">\n          <Question\n            count={count}\n            definition={definition}\n            previous={previous}\n            isCorrect={isCorrect}\n            showPrevResult={this.showPrevResult(definition)}\n            showBtnText={this.showBtnText()}\n            checkAnswer={this.checkAnswer} />\n          <Answer\n            nextQuestion={this.nextQuestion}\n            answer={answeredCorrectly}\n            count={count} />\n        </div>\n      )\n    }\n  }\n}","import React, { Component } from 'react';\nimport './CSS/Main.scss';\nimport Card from './Card.js'\n\nexport default class Display extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      correctlyAnswered: null\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"display\">\n        <Card\n          questions={this.props.prototypes}\n          currentAnswer={this.props.currentAnswer}\n          answeredQuestions={this.props.answeredQuestions} />\n      </section>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './CSS/Main.scss';\n\nexport default class Nav extends Component {\n\n  render() {\n    let { theScore } = this.props;\n \n    return (\n      <nav className=\"nav\">\n        <ul className=\"types\">\n          <li className=\"aTypes\">Practice Array Prototypes!</li>\n        </ul>\n        <ul className=\"user\">\n          <li>Total correct: {theScore}</li>\n          <li onClick={this.props.reset}\n            className=\"reset-btn\">Reset your progress</li>\n        </ul>\n      </nav>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './CSS/Main.scss';\nimport Display from './Display.js';\nimport Nav from './Nav.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      prototypes: null, \n      answeredQuestions: [],\n      isLoading: true\n    }\n  }\n\n  componentDidMount = () => { \n    fetch('http://memoize-datasets.herokuapp.com/api/v1/aTypes')\n      .then(data => data.json())\n      .then(data => {\n        setTimeout(() => {\n          this.setState({\n            prototypes: data.aTypes,\n            answeredQuestions: this.getFromStorage(),\n            isLoading: false\n          })\n        }, 200);\n      })\n      .catch(err => console.error(err))\n  }\n\n  getFromStorage = () => {\n    if (localStorage.length === 0) {\n      return [];\n    } else {\n      return JSON.parse(localStorage.getItem('data'))\n    }\n  }\n\n  updateAnsweredQuestions = (guess, question) => {\n    let modArr = this.state.answeredQuestions\n    modArr.push({ guess: guess, question: question })\n\n    this.setState({ answeredQuestions: modArr })\n    localStorage.setItem('data', JSON.stringify(modArr))\n  }\n\n  tallyScore = () => { \n    let { answeredQuestions } = this.state;\n\n    if (answeredQuestions.length === 0) {\n      return 0;\n    } else {\n      return answeredQuestions.filter(answer => {\n        return answer.question\n      }).length\n    }\n  }\n\n  reset = () => {\n    this.setState({ answeredQuestions: [] })\n    localStorage.removeItem('data');\n  }\n\n  render() {\n    let { prototypes, isLoading } = this.state;\n    if (isLoading) {\n      return (\n        <div>Loading</div>\n      );\n    } else {\n      let { answeredQuestions } = this.state;\n      return (\n        <main className=\"App\">\n          <h1 className=\"header\">Welcome to Study Time</h1>\n          <Nav\n            theScore={this.tallyScore()}\n            reset={this.reset} />\n          <Display\n            prototypes={prototypes}\n            currentAnswer={this.updateAnsweredQuestions}\n            answeredQuestions={answeredQuestions} />\n        </main>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './Main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}